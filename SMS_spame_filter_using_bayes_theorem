#import data from excell sheet
sms_raw <- read.csv("E:\\Data_Science\\self_study\\SMS_Filter_Bayes_theorem\\sms_spam_bayes_theorem.csv", stringsAsFactors = FALSE)
str(sms_raw)

#convert type column into factor data type 
sms_raw$type <- factor(sms_raw$type)
str(sms_raw$type)
table(sms_raw$type)
#install.packages("tm") for data cleaning
install.packages("tm")
library(tm)

#use VCorpus function for store data in memory 
sms_corpus <- VCorpus(VectorSource(sms_raw$text))
inspect(sms_corpus[1:2])

#to see actual message we use as.character function
as.character(sms_corpus[[1]])

#we use lapply function for apply as.character function to whole data mention within function
lapply(sms_corpus[1:2], as.character)

#now start data cleaning using tm_map functions
sms_corpus_clean <- tm_map(sms_corpus, content_transformer(tolower))
as.character(sms_corpus[[1]])
as.character(sms_corpus_clean[[1]])
sms_corpus_clean <- tm_map(sms_corpus_clean, removeNumbers)
sms_corpus_clean <- tm_map(sms_corpus_clean, removeWords, stopwords())
sms_corpus_clean <- tm_map(sms_corpus_clean, removePunctuation)

#install.packages("SnowballC") from stemming(convert words into root form) our data 
install.packages("SnowballC")
library(SnowballC)
sms_corpus_clean <- tm_map(sms_corpus_clean, stemDocument)
sms_corpus_clean <- tm_map(sms_corpus_clean, stripWhitespace)

#use dtm(document term matrix) function for tokenizing data into matri form   
sms_dtm <- DocumentTermMatrix(sms_corpus_clean)

#We can do above work in below mention one line query also

############################
#you can notice minor discrepancy in data because of cleaning ordering is different

sms_dtm2 <- DocumentTermMatrix(sms_corpus, control = list(tolower = TRUE,
                                                          removeNumbers = TRUE,
                                                          stopwords = TRUE,
                                                          removePunctuation = TRUE,
                                                          stemming = TRUE
))

############################
sms_dtm
sms_dtm2

#create to set for train and test data

sms_dtm_train <- sms_dtm[1:4169, ]
sms_dtm_test <- sms_dtm[4170:5572, ]

#create vector labels from orignal raw data for convenience
sms_train_labels <- sms_raw[1:4169, ]$type
sms_test_labels <- sms_raw[4170:5572, ]$type

#check portion of spam and ham data in train and test dataset 
prop.table(table(sms_train_labels))
prop.table(table(sms_test_labels))

#install.packages("wordcloud") for visullation of dataset
install.packages("wordcloud")
library(wordcloud)

wordcloud(sms_corpus_clean, min.freq = 50, random.order = FALSE)

#create subset for spam and ham data from raw data
spam <- subset(sms_raw, type == "spam")
ham <- subset(sms_raw, type == "ham")

wordcloud(spam$text, max.words = 40, scale = c(3, 0.5))
wordcloud(ham$text, max.words = 40, scale = c(3, 0.5))

findFreqTerms(sms_dtm_train, 5)
sms_freq_words <- findFreqTerms(sms_dtm_train, 5)

str(sms_freq_words)

#further clean data and store only repeatative data more than 5 as mention below 
sms_dtm_freq_train <- sms_dtm_train[ , sms_freq_words]
sms_dtm_freq_test <- sms_dtm_test[ , sms_freq_words]

#function used to convert number count into yes and no

convert_counts <- function(x) {
  x <- ifelse(x > 0, "yes", "No")
}

#now we need to apply above function in every row and column using 'apply' functon
sms_train <- apply(sms_dtm_freq_train, MARGIN = 2, convert_counts)
sms_test <- apply(sms_dtm_freq_test, MARGIN = 2, convert_counts)

#now time to apply naive bayes theorem using below package
install.packages("e1071")
library("e1071")

sms_classifier <- naiveBayes(sms_train, sms_train_labels)
sms_test_pred <- predict(sms_classifier, sms_test)

library(gmodels)

CrossTable(sms_test_pred, sms_test_labels, 
           prop.chisq = FALSE, prop.t = FALSE,
           dnn = c('predicted', 'actual'))

################
#apply bayes theorem using laplace parameter for checking improvement

sms_classifier2 <- naiveBayes(sms_train, sms_train_labels, laplace=1)
sms_test_pred2 <- predict(sms_classifier, sms_test)

CrossTable(sms_test_pred2, sms_test_labels, 
           prop.chisq = FALSE, prop.t = FALSE,
           dnn = c('predicted', 'actual'))
